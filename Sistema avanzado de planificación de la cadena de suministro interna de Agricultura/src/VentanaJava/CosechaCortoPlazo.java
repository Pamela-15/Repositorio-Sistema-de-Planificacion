package VentanaJava;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class CosechaCortoPlazo extends javax.swing.JFrame {
    int idUsuarioAutenticado;
    /**
     * Creates new form CosechaCortoPlazo
     */
    public CosechaCortoPlazo(int usuario) {
        initComponents();
        idUsuarioAutenticado=usuario;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        GenerarReporte = new javax.swing.JButton();
        ConsultarReporte = new javax.swing.JButton();
        ModificarReporte = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 22)); // NOI18N
        jLabel1.setText("Planificación de Cosecha a Corto Plazo");

        GenerarReporte.setFont(new java.awt.Font("Calibri Light", 0, 22)); // NOI18N
        GenerarReporte.setText("Generar Reporte");
        GenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarReporteActionPerformed(evt);
            }
        });

        ConsultarReporte.setFont(new java.awt.Font("Calibri Light", 0, 22)); // NOI18N
        ConsultarReporte.setText(" Consultar Reporte");
        ConsultarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarReporteActionPerformed(evt);
            }
        });

        ModificarReporte.setFont(new java.awt.Font("Calibri Light", 0, 22)); // NOI18N
        ModificarReporte.setText("Modificar Reporte");
        ModificarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(GenerarReporte)
                .addGap(42, 42, 42)
                .addComponent(ConsultarReporte)
                .addGap(32, 32, 32)
                .addComponent(ModificarReporte)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(162, 162, 162))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GenerarReporte)
                    .addComponent(ConsultarReporte)
                    .addComponent(ModificarReporte))
                .addGap(115, 115, 115))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ModificarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarReporteActionPerformed
        mostrarModificarReporte(idUsuarioAutenticado);
    }//GEN-LAST:event_ModificarReporteActionPerformed

    private void GenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarReporteActionPerformed
        jDialog1.setVisible(true);
        jDialog1.setLocationRelativeTo(null);
        jDialog1.setTitle("Generando.....");
        jDialog1.setSize(200,50);
        
        
        Date hoy=new Date();
        Calendar calendar = Calendar.getInstance();
        Calendar desfasesemanal= Calendar.getInstance();
        calendar.setTime(hoy);
        calendar.add(Calendar.DAY_OF_YEAR, 2);
        Date inicio=calendar.getTime();
        java.sql.Date sqlFechaInicial = new java.sql.Date(inicio.getTime());
        calendar.setTime(inicio);
        calendar.add(Calendar.DAY_OF_YEAR, 7);
        Date fin=calendar.getTime();
        java.sql.Date sqlFechaFinal = new java.sql.Date(fin.getTime());
        String driver = "com.mysql.jdbc.Driver";
        String connection = "jdbc:mysql://localhost:3306/cargill";
        String user = "root";
        String password = "admi";
        try {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(connection, user, password);
                           
            if (!con.isClosed()) {
                
                int o;
                float raleo;
                float[] demandanum = new float[13];
                float[] desglosesemanal = new float[7];
                java.util.Date fechaA;
                java.sql.Date fechaB;
                PreparedStatement porcentajeraleo=con.prepareStatement("SELECT * FROM `cargill`.`raleo y distribución demanda` order by `raleo y distribución demanda`.`id`;");
                ResultSet valorraleo = porcentajeraleo.executeQuery();
                valorraleo.next();
                raleo=valorraleo.getFloat("POrcentaje");
                valorraleo.close();
                porcentajeraleo.close();
                        
                
                PreparedStatement diassemana=con.prepareStatement("SELECT `Raleo y distribución demanda`.`id`,`Raleo y distribución demanda`.`Variable`, `Raleo y distribución demanda`.`Porcentaje` FROM `cargill`.`Raleo y distribución demanda` WHERE `Raleo y distribución demanda`.`id`>1 ORDER BY `Raleo y distribución demanda`.`id` ASC ;");
                ResultSet distribuciondias=diassemana.executeQuery();
                int zx=0;
                while(distribuciondias.next()){
                    desglosesemanal[zx]=distribuciondias.getFloat("Porcentaje");
                }
                distribuciondias.close();
                diassemana.close();
                
                desfasesemanal.setTime(inicio);
                int semana= desfasesemanal.get(Calendar.WEEK_OF_YEAR);
                int diasemana=desfasesemanal.get(Calendar.DAY_OF_WEEK);
                PreparedStatement demanda = con.prepareStatement ("SELECT `demanda`.`Demanda` FROM `cargill`.`demanda` where `demanda`.`Semana`=?;");
                demanda.setInt(1,semana);
                ResultSet resultadodemanda = demanda.executeQuery();
                resultadodemanda.next();
                float necesidad=resultadodemanda.getInt("Demanda");
                resultadodemanda.close();
                PreparedStatement demanda1 = con.prepareStatement ("SELECT `demanda`.`Demanda` FROM `cargill`.`demanda` where `demanda`.`Semana`=?;");
                demanda.setInt(1,semana+1);
                ResultSet resultadodemanda1 = demanda1.executeQuery();
                resultadodemanda1.next();
                float necesidad1=resultadodemanda1.getInt("Demanda");
                resultadodemanda1.close();
                
                for(o=diasemana;o<=7;o++){
                    demandanum[o-1]=(float)(necesidad*desglosesemanal[o+2]);
                }
                for(o=7;o<diasemana-1;o++){
                    demandanum[o]=(float)(necesidad1*desglosesemanal[o+2]);
                }
                demanda.close();
                String[][] rangospredeterminado=new String[4][5];
                int e=0;
                PreparedStatement rangospredeterminados =con.prepareStatement ("SELECT `rango de peso`.`Rango de Peso`, `rango de peso`.`Límite Superior`, `rango de peso`.`Límite Inferior`, `rango de peso`.`Porcentaje de Necesidad`,`rango de peso`.`Velocidad de Procesamiento` FROM `cargill`.`rango de peso`;");
                ResultSet resultadorangospredeterminados=rangospredeterminados.executeQuery();
                while(resultadorangospredeterminados.next()){
                    rangospredeterminado[e][0]=resultadorangospredeterminados.getString("Rango de Peso");
                    rangospredeterminado[e][1]=resultadorangospredeterminados.getString("Límite Superior");
                    rangospredeterminado[e][2]=resultadorangospredeterminados.getString("Límite Inferior");
                    rangospredeterminado[e][3]=resultadorangospredeterminados.getString("Porcentaje de Necesidad");
                    rangospredeterminado[e][4]=resultadorangospredeterminados.getString("Velocidad de Procesamiento");
                    e++;
                }
                resultadorangospredeterminados.close();
                rangospredeterminados.close();
                String[][] cortespredeterminado=new String[3][3];
                e=0;
                PreparedStatement cortepredeterminado =con.prepareStatement ("SELECT `costes estándar`.`Nombre de corte`, `costes estándar`.`Porcentaje de Necesidad`, `costes estándar`.`Porcentaje de rendimiento` FROM `cargill`.`costes estándar`;");
                ResultSet resultadocortepredeterminado=cortepredeterminado.executeQuery();
                while(resultadocortepredeterminado.next()){
                    cortespredeterminado[e][0]=resultadocortepredeterminado.getString("Nombre de corte");
                    cortespredeterminado[e][1]=resultadocortepredeterminado.getString("Porcentaje de Necesidad");
                    cortespredeterminado[e][2]=resultadocortepredeterminado.getString("Porcentaje de rendimiento");
                    e++;
                }
                resultadocortepredeterminado.close();
                cortepredeterminado.close();
                
                int cantidadcortesreal, cantidadrangosreal;
                
                PreparedStatement numerorangosreal = con.prepareStatement("SELECT count(*) FROM `cargill`.`necesidades por rango real`where (((`necesidades por rango real`.`Fecha de inicio`>=? and `necesidades por rango real`.`Fecha de inicio`<=?) or (`necesidades por rango real`.`Fecha de finalización`>=? and `necesidades por rango real`.`Fecha de finalización`<=?)) or (`necesidades por rango real`.`Fecha de inicio`<=? and `necesidades por rango real`.`Fecha de finalización`>= ? ));");
                numerorangosreal.setDate(1,sqlFechaInicial);
                numerorangosreal.setDate(2,sqlFechaFinal);
                numerorangosreal.setDate(3,sqlFechaInicial);
                numerorangosreal.setDate(4,sqlFechaFinal);
                numerorangosreal.setDate(5,sqlFechaInicial);
                numerorangosreal.setDate(6,sqlFechaFinal);
                ResultSet resultadonumerorangosreal=numerorangosreal.executeQuery();
                resultadonumerorangosreal.next();
                cantidadrangosreal=resultadonumerorangosreal.getInt("count(*)");
                resultadonumerorangosreal.close();
                numerorangosreal.close();
                String[][] rangos=new String[cantidadrangosreal][2];
                java.sql.Date[][] fechasrangos=new java.sql.Date[cantidadrangosreal][2];
                
                if(cantidadrangosreal>0){
                    
                    e=0;
                    numerorangosreal = con.prepareStatement("SELECT `necesidades por rango real`.`Fecha de inicio`, `necesidades por rango real`.`Fecha de finalización`, `necesidades por rango real`.`Porcentaje de necesidad`,`necesidades por rango real`.`Velocidad de procesamiento`, `necesidades por rango real`.`Rango de peso_Nombre` FROM `cargill`.`necesidades por rango real`where (((`necesidades por rango real`.`Fecha de inicio`>=? and `necesidades por rango real`.`Fecha de inicio`<=?) or (`necesidades por rango real`.`Fecha de finalización`>=? and `necesidades por rango real`.`Fecha de finalización`<=?)) or (`necesidades por rango real`.`Fecha de inicio`<=? and `necesidades por rango real`.`Fecha de finalización`>= ? )), order by `necesidades por rango real`.`Fecha de inicio`;");
                    numerorangosreal.setDate(1,sqlFechaInicial);
                    numerorangosreal.setDate(2,sqlFechaFinal);
                    numerorangosreal.setDate(3,sqlFechaInicial);
                    numerorangosreal.setDate(4,sqlFechaFinal);
                    numerorangosreal.setDate(5,sqlFechaInicial);
                    numerorangosreal.setDate(6,sqlFechaFinal);
                    resultadonumerorangosreal=numerorangosreal.executeQuery();
                    while(resultadonumerorangosreal.next()){
                        fechasrangos[e][0]=resultadonumerorangosreal.getDate("Fecha de inicio");
                        fechasrangos[e][1]=resultadonumerorangosreal.getDate("Fecha de finalización");
                        rangos[e][0]=resultadonumerorangosreal.getString("Porcentaje de necesidad");
                        rangos[e][1]=resultadonumerorangosreal.getString("Rango de peso_Nombre");
                        rangos[e][2]=resultadonumerorangosreal.getString("Velocidad de procesamiento");
                        e++;
                    }
                    resultadonumerorangosreal.close();
                    numerorangosreal.close();
                }//los extraigo y guardo en una variable pero, ¿no debería asignarlos de alguna forma a los planes que afectan? ¿el count es por si hay más de un cambio que afecte en esas fechas?
                
                PreparedStatement numerocortesreal = con.prepareStatement("SELECT count(*) FROM `cargill`.`cortes real` where (((`cortes real`.`Fecha de inicio`>=? and `cortes real`.`Fecha de inicio`<=?) or (`cortes real`.`Fecha de finalización`>=? and `cortes real`.`Fecha de finalización`<=?)) or (`cortes real`.`Fecha de inicio`<=? and `cortes real`.`Fecha de finalización`>= ? ));");
                numerocortesreal.setDate(1,sqlFechaInicial);
                numerocortesreal.setDate(2,sqlFechaFinal);
                numerocortesreal.setDate(3,sqlFechaInicial);
                numerocortesreal.setDate(4,sqlFechaFinal);
                numerocortesreal.setDate(5,sqlFechaInicial);
                numerocortesreal.setDate(6,sqlFechaFinal);
                ResultSet resultadonumerocortesreal=numerocortesreal.executeQuery();
                resultadonumerocortesreal.next();
                cantidadcortesreal=resultadonumerocortesreal.getInt("count(*)");
                resultadonumerocortesreal.close();
                numerocortesreal.close();
                String[][] cortes=new String[cantidadcortesreal][3];
                java.sql.Date[][] fechascortes=new java.sql.Date[cantidadcortesreal][2];
                if(cantidadcortesreal>0){
                    
                    e=0;
                    numerocortesreal = con.prepareStatement("SELECT `cortes real`.`Fecha de inicio`, `cortes real`.`Fecha de finalización`, `cortes real`.`Porcentaje de necesidad`, `cortes real`.`Porcentaje de rendimiento`, `cortes real`.`Costes estándar_Nombre` FROM `cargill`.`cortes real`where (((`cortes real`.`Fecha de inicio`>=? and `cortes real`.`Fecha de inicio`<=?) or (`cortes real`.`Fecha de finalización`>=? and `cortes real`.`Fecha de finalización`<=?)) or (`cortes real`.`Fecha de inicio`<=? and `cortes real`.`Fecha de finalización`>= ? )) order by `cortes real`.`Fecha de inicio`;");
                    numerocortesreal.setDate(1,sqlFechaInicial);
                    numerocortesreal.setDate(2,sqlFechaFinal);
                    numerocortesreal.setDate(3,sqlFechaInicial);
                    numerocortesreal.setDate(4,sqlFechaFinal);
                    numerocortesreal.setDate(5,sqlFechaInicial);
                    numerocortesreal.setDate(6,sqlFechaFinal);
                    resultadonumerocortesreal=numerocortesreal.executeQuery();
                    while(resultadonumerocortesreal.next()){
                        fechascortes[e][0]=resultadonumerocortesreal.getDate("Fecha de inicio");
                        fechascortes[e][1]=resultadonumerocortesreal.getDate("Fecha de finalización");
                        cortes[e][0]=resultadonumerocortesreal.getString("Porcentaje de necesidad");
                        cortes[e][1]=resultadonumerocortesreal.getString("Porcentaje de rendimiento");
                        cortes[e][2]=resultadonumerocortesreal.getString("Costes estándar_Nombre");
                        e++;
                    }
                    resultadonumerocortesreal.close();
                    numerocortesreal.close();
                }
                float pesopromedioGrande, pesopromedioMediano, pesopromedioPequeño;
                pesopromedioPequeño=1;
                pesopromedioGrande=1;
                pesopromedioMediano=1;
                PreparedStatement rangospesopromedioraleo =con.prepareStatement ("SELECT sum (`pesaje`.`Peso promedio`) as promedio, count (`pesaje`.`Peso promedio`) as cuenta, `rango de peso`.`Rango de Peso` FROM `cargill`.`Ingresos` INNER JOIN `cargill`.`Pesaje` on `Ingresos`.`Fecha de raleo` = `Pesaje`.`Fecha de registro` INNER JOIN `cargill`.`rango de peso` ON `Pesaje`.`Peso promedio` <= `rango de peso`.`Límite Superior` and `Pesaje`.`Peso promedio` >= `rango de peso`.`Límite Inferior` where `Ingresos`.`Fecha de raleo`>? group by `rango de peso`.`Rango de Peso`;");
                calendar.setTime(inicio); 
                calendar.add(calendar.DAY_OF_YEAR,-730);
                Date limiteDatos = calendar.getTime();
                java.sql.Date sqlLimiteDatos = new java.sql.Date(limiteDatos.getTime());
                rangospesopromedioraleo.setDate(1, sqlLimiteDatos);
                
                ResultSet resultadorangospesopromedioraleo=rangospesopromedioraleo.executeQuery();
                
                float sumagranderaleo = 0, sumamedianoraleo =0, sumapequeñoraleo= 0;
                int cuentagranderaleo=1, cuentamedianoraleo=1, cuentapequeñoraleo=1;
                
                while(resultadorangospesopromedioraleo.next()){
                    if(resultadorangospesopromedioraleo.getString("Rango de Peso").equals("Grande")){
                        sumagranderaleo=resultadorangospesopromedioraleo.getFloat("promedio");
                        cuentagranderaleo=resultadorangospesopromedioraleo.getInt("cuenta");
                    }
                    if(resultadorangospesopromedioraleo.getString("Rango de Peso").equals("Mediano")){
                        sumamedianoraleo=resultadorangospesopromedioraleo.getFloat("promedio");
                        cuentamedianoraleo=resultadorangospesopromedioraleo.getInt("cuenta");
               
                    }
                    if(resultadorangospesopromedioraleo.getString("Rango de Peso").equals("Pequeño")){
                        sumapequeñoraleo=resultadorangospesopromedioraleo.getFloat("promedio");
                        cuentapequeñoraleo=resultadorangospesopromedioraleo.getInt("cuenta");
                    }
                }
                resultadorangospesopromedioraleo.close();
                rangospesopromedioraleo.close();
                
                PreparedStatement rangospesopromediocosecha =con.prepareStatement ("SELECT sum (`pesaje`.`Peso promedio`) as promedio, count (`pesaje`.`Peso promedio`) as cuenta, `rango de peso`.`Rango de Peso` FROM `cargill`.`Ingresos` INNER JOIN `cargill`.`Pesaje` on `Ingresos`.`Fecha de cosecha` = `Pesaje`.`Fecha de registro` INNER JOIN `cargill`.`rango de peso` ON `Pesaje`.`Peso promedio` <= `rango de peso`.`Límite Superior` and `Pesaje`.`Peso promedio` >= `rango de peso`.`Límite Inferior` where `Ingresos`.`Fecha de cosecha`>? group by `rango de peso`.`Rango de Peso`;");
                rangospesopromedioraleo.setDate(1, sqlLimiteDatos);
                
                ResultSet resultadorangospesopromediocosecha=rangospesopromediocosecha.executeQuery();
                
                float sumagrandecosecha = 0, sumamedianocosecha = 0, sumapequeñocosecha = 0;
                int cuentagrandecosecha = 1, cuentamedianocosecha = 1, cuentapequeñocosecha =1 ;
                
                while(resultadorangospesopromediocosecha.next()){
                    if(resultadorangospesopromediocosecha.getString("Rango de Peso").equals("Grande")){
                        sumagrandecosecha=resultadorangospesopromediocosecha.getFloat("promedio");
                        cuentagrandecosecha=resultadorangospesopromediocosecha.getInt("cuenta");
                    }
                    if(resultadorangospesopromediocosecha.getString("Rango de Peso").equals("Mediano")){
                        sumamedianocosecha=resultadorangospesopromediocosecha.getFloat("promedio");
                        cuentamedianocosecha=resultadorangospesopromediocosecha.getInt("cuenta");
               
                    }
                    if(resultadorangospesopromediocosecha.getString("Rango de Peso").equals("Pequeño")){
                        sumapequeñocosecha=resultadorangospesopromediocosecha.getFloat("promedio");
                        cuentapequeñocosecha=resultadorangospesopromediocosecha.getInt("cuenta");
                    }
                }
                resultadorangospesopromediocosecha.close();
                rangospesopromediocosecha.close();
                
                pesopromedioPequeño= (sumapequeñoraleo + sumapequeñocosecha)/(cuentapequeñoraleo+cuentapequeñocosecha);
                pesopromedioGrande= (sumagranderaleo + sumagrandecosecha)/(cuentagranderaleo+cuentagrandecosecha);
                pesopromedioMediano= (sumamedianoraleo + sumamedianocosecha)/(cuentamedianoraleo+cuentamedianocosecha);
                
                
                int cantidadsecuencia;
                PreparedStatement secuenciapredcuenta = con.prepareStatement("SELECT count(*) as cuenta FROM `cargill`.`secuencia de transporte estándar`;");
                ResultSet cuentasecuenciapre = secuenciapredcuenta.executeQuery();
                cuentasecuenciapre.next();
                cantidadsecuencia=cuentasecuenciapre.getInt("cuenta");
                cuentasecuenciapre.close();
                secuenciapredcuenta.close();
                
                String[][] secuenciapredeterminada=new String[cantidadsecuencia][2];
                PreparedStatement secuenciapred = con.prepareStatement("SELECT `secuencia de transporte estándar`.`Secuencia`, `secuencia de transporte estándar`.`Horas de procesamiento`, `secuencia de transporte estándar`.`Rango de peso_Nombre` FROM `cargill`.`secuencia de transporte estándar` order by `secuencia de transporte estándar`.`Secuencia` asc ;");
                ResultSet resultadosecuenciapre = secuenciapred.executeQuery();
                int i=0;
                while(resultadosecuenciapre.next()){
                    secuenciapredeterminada[i][0]=resultadosecuenciapre.getString("Rango de peso_Nombre");
                    secuenciapredeterminada[i][1]=resultadosecuenciapre.getString("Horas de procesamiento");
                }
                resultadosecuenciapre.close();
                secuenciapred.close();
                
                int[] cantidadsecuenciaesp= new int[7];
                int diassecuenciados=0;
                PreparedStatement secuenciaespcuenta = con.prepareStatement("SELECT count(*) as cuenta FROM `cargill`.`secuencia de transporte real` where (`secuencia de transporte real`.`Fecha de inicio`>? and `secuencia de transporte real`.`Fecha de inicio`< ?) or (`secuencia de transporte real`.`Fecha de finalización`>? and `secuencia de transporte real`.`Fecha de finalización`< ?) or (`secuencia de transporte real`.`Fecha de inicio`<? and `secuencia de transporte real`.`Fecha de finalización`> ?) group by `secuencia de transporte real`.`Fecha de inicio` order by `secuencia de transporte real`.`Fecha de inicio` asc;");
                secuenciaespcuenta.setDate(1,sqlFechaInicial);
                secuenciaespcuenta.setDate(2,sqlFechaFinal);
                secuenciaespcuenta.setDate(3,sqlFechaInicial);
                secuenciaespcuenta.setDate(4,sqlFechaFinal);
                secuenciaespcuenta.setDate(5,sqlFechaInicial);
                secuenciaespcuenta.setDate(6,sqlFechaFinal);
                ResultSet cuentasecuenciaesp = secuenciaespcuenta.executeQuery();
                while(cuentasecuenciaesp.next()){;
                    cantidadsecuenciaesp[diassecuenciados]=cuentasecuenciaesp.getInt("cuenta");
                    diassecuenciados++;
                }
                cuentasecuenciaesp.close();
                secuenciaespcuenta.close();
                
                String[][][] secuenciaespecifica=new String[16][2][diassecuenciados];
                java.sql.Date[][] fechassec=new java.sql.Date[diassecuenciados][2];
                
                if (diassecuenciados > 0){
                
                PreparedStatement secuenciaesp = con.prepareStatement("SELECT `secuencia de transporte real`.`Secuencia`, `secuencia de transporte real`.`Horas de procesamiento`, `secuencia de transporte real`.`Fecha de inicio`,`secuencia de transporte real`.`Fecha de finalización`, `secuencia de transporte real`.`Rango de peso_Nombre` FROM `cargill`.`secuencia de transporte real` where (`secuencia de transporte real`.`Fecha de inicio`>? and `secuencia de transporte real`.`Fecha de inicio`< ?) or (`secuencia de transporte real`.`Fecha de finalización`>? and `secuencia de transporte real`.`Fecha de finalización`< ?) or (`secuencia de transporte real`.`Fecha de inicio`<? and `secuencia de transporte real`.`Fecha de finalización`> ?) order by `secuencia de transporte real`.`Fecha de inicio asc,`secuencia de transporte real`.`Secuencia` asc;");
                secuenciaesp.setDate(1,sqlFechaInicial);
                secuenciaesp.setDate(2,sqlFechaFinal);
                secuenciaesp.setDate(3,sqlFechaInicial);
                secuenciaesp.setDate(4,sqlFechaFinal);
                secuenciaesp.setDate(5,sqlFechaInicial);
                secuenciaesp.setDate(6,sqlFechaFinal);
                ResultSet resultadosecuenciaesp = secuenciaesp.executeQuery();
                i=0;
                resultadosecuenciapre.next();
                while(i<diassecuenciados){
                    fechassec[i][0]=resultadosecuenciaesp.getDate("Fecha de inicio");
                    fechassec[i][1]=resultadosecuenciaesp.getDate("Fecha de finalización");
                    for(int k=0;k<cantidadsecuenciaesp[i];k++){
                        secuenciaespecifica[k][0][i]=resultadosecuenciaesp.getString("Rango de peso_Nombre");
                        secuenciaespecifica[k][1][i]=resultadosecuenciaesp.getString("Horas de procesamiento");
                        resultadosecuenciapre.next();
                    }
                    i++;
                    
                }
                resultadosecuenciaesp.close();
                secuenciaesp.close();
                }
                String[][][] secuenciautilizar=new String[16][3][7];
                int [] tamañosecuenciautilizar=new int[7];
                for(int d=0;d<7;d++){
                    calendar.setTime(inicio);
                    calendar.add(Calendar.DAY_OF_YEAR,d);
                    fechaA = calendar.getTime();
                    fechaB = new java.sql.Date(fechaA.getTime());
                    for(int p=0;p<cantidadsecuencia;p++){
                        secuenciautilizar[p][0][d]=secuenciapredeterminada[p][0];
                        secuenciautilizar[p][1][d]=secuenciapredeterminada[p][1];
                    }
                    tamañosecuenciautilizar[d]=cantidadsecuencia;
                    for (int h=0;h<diassecuenciados;h++){
                        if((fechaB.after(fechassec[h][0])||fechaB.equals(fechassec[h][0])) && (fechaB.equals(fechassec[h][1])||fechaB.before(fechassec[h][1]))){
                            for(int j=0;j<cantidadsecuenciaesp[h];j++){
                                secuenciautilizar[j][0][d]=secuenciaespecifica[j][0][h];
                                secuenciautilizar[j][1][d]=secuenciaespecifica[j][1][h];
                            }
                            tamañosecuenciautilizar[d]=cantidadsecuenciaesp[h];
                        }
                    }
                }
//iniciar calculando necesidad actualizada
                
                float[][] necesidadActualizadaAves;
                necesidadActualizadaAves=new float[7][8];
                for(int m=0;m<7;m++){
                    calendar.setTime(inicio);
                    calendar.add(Calendar.DAY_OF_YEAR,m);
                    fechaA = calendar.getTime();
                    fechaB = new java.sql.Date(fechaA.getTime());
                    necesidadActualizadaAves[m][0]=((demandanum[m]*Float.parseFloat(cortespredeterminado[0][1]))/Float.parseFloat(cortespredeterminado[0][2]))+((demandanum[m]*Float.parseFloat(cortespredeterminado[1][1]))/Float.parseFloat(cortespredeterminado[1][2]))+((demandanum[m]*Float.parseFloat(cortespredeterminado[2][1]))/Float.parseFloat(cortespredeterminado[2][2]));
                    necesidadActualizadaAves[m][1]=((necesidadActualizadaAves[m][0]*Float.parseFloat(rangospredeterminado[0][3]))/pesopromedioPequeño)+((necesidadActualizadaAves[m][0]*Float.parseFloat(rangospredeterminado[1][3]))/pesopromedioMediano)+((necesidadActualizadaAves[m][0]*Float.parseFloat(rangospredeterminado[2][3]))/pesopromedioGrande);
                    necesidadActualizadaAves[m][2]=demandanum[m]*Float.parseFloat(rangospredeterminado[0][3]);
                    necesidadActualizadaAves[m][3]=demandanum[m]*Float.parseFloat(rangospredeterminado[1][3]);
                    necesidadActualizadaAves[m][4]=demandanum[m]*Float.parseFloat(rangospredeterminado[2][3]);
                    necesidadActualizadaAves[m][5]=Float.parseFloat(rangospredeterminado[0][4]);
                    necesidadActualizadaAves[m][6]=Float.parseFloat(rangospredeterminado[1][4]);
                    necesidadActualizadaAves[m][7]=Float.parseFloat(rangospredeterminado[2][4]);
                    for(int n=0;n<cantidadcortesreal;n=n+3){
                        if((fechaB.after(fechascortes[n][0])||fechaB.equals(fechascortes[n][0])) && (fechaB.equals(fechascortes[n][1])||fechaB.before(fechascortes[n][1]))){
                            necesidadActualizadaAves[m][0]=((demandanum[m]*Float.parseFloat(cortes[n][0]))/Float.parseFloat(cortes[n][1]))+((demandanum[m]*Float.parseFloat(cortes[n+1][0]))/Float.parseFloat(cortes[n+1][1]))+((demandanum[m]*Float.parseFloat(cortes[n+2][0]))/Float.parseFloat(cortes[n+2][1]));
                        }
                    }
                    for(o=0;o<cantidadrangosreal;o=o+3){
                        calendar.setTime(inicio);
                        calendar.add(Calendar.DAY_OF_YEAR,m);
                        fechaA = calendar.getTime();
                        fechaB = new java.sql.Date(fechaA.getTime());
                        if((fechaB.after(fechasrangos[o][0])||fechaB.equals(fechasrangos[o][0])) && (fechaB.equals(fechasrangos[o][1])||fechaB.before(fechasrangos[o][1]))){
                            necesidadActualizadaAves[m][1]=((necesidadActualizadaAves[m][0]*Float.parseFloat(rangos[o][0]))/pesopromedioPequeño)+((necesidadActualizadaAves[m][0]*Float.parseFloat(rangos[o+1][0]))/pesopromedioMediano)+((necesidadActualizadaAves[m][0]*Float.parseFloat(rangos[o+2][0]))/pesopromedioGrande);
                            necesidadActualizadaAves[m][2]=Float.parseFloat(rangos[o][0]); // necesidad de pequeño
                            necesidadActualizadaAves[m][3]=Float.parseFloat(rangos[o+1][0]); //necesidad de mediano
                            necesidadActualizadaAves[m][4]=Float.parseFloat(rangos[o+2][0]); //necesidad de grande
                            necesidadActualizadaAves[m][5]=Float.parseFloat(rangos[o][2]);//velocidad de procesamiento pequeño
                            necesidadActualizadaAves[m][6]=Float.parseFloat(rangos[o+1][2]);//velocidad de procesamiento mediana
                            necesidadActualizadaAves[m][7]=Float.parseFloat(rangos[o+2][2]);//velocidad de procesamiento grande
                            
                        }
                    }
                }
                calendar.setTime(hoy);
                calendar.add(Calendar.DAY_OF_YEAR, -2);
                Date raleoA=calendar.getTime();
                java.sql.Date sqlraleoA = new java.sql.Date(raleoA.getTime());
                calendar.setTime(hoy);
                calendar.add(Calendar.DAY_OF_YEAR, -18);
                Date limiteingreso=calendar.getTime();
                java.sql.Date sqlingreso = new java.sql.Date(limiteingreso.getTime());
                int cantidadgalerasingresadas;              
                PreparedStatement cantidadgalerasdisponibles= con.prepareStatement ("SELECT count(*) as cuenta FROM `cargill`.`ingresos` WHERE (ingresos.`Fecha de raleo`<? or ingresos.`Fecha de raleo`is null) AND INGRESOS.`Fecha de cosecha` is null AND INGRESOS.`Fecha de ingreso`<?;");
                cantidadgalerasdisponibles.setDate(1,sqlraleoA);
                cantidadgalerasdisponibles.setDate(2,sqlFechaInicial);
                cantidadgalerasdisponibles.setDate(3,sqlingreso);
                ResultSet resultadocantidadgalerasdisponibles = cantidadgalerasdisponibles.executeQuery();
                resultadocantidadgalerasdisponibles.next();
                cantidadgalerasingresadas=resultadocantidadgalerasdisponibles.getInt("cuenta");
                resultadocantidadgalerasdisponibles.close();
                cantidadgalerasdisponibles.close();
                             
                //meter secuencia aca, las dos la real y la especifica, y recordar que ocupo una matriz de tres dimensiones
                String[][] galeras=new String [cantidadgalerasingresadas][11];
                int[] idgalera=new int[1000];
                float[][] variablespp=new float [cantidadgalerasingresadas][22];
                java.sql.Date[][] fechasgaleras=new java.sql.Date[cantidadgalerasingresadas][2];
                int h=0;
                PreparedStatement galerasdisponibles= con.prepareStatement ("SELECT `ingresos`.`idIngresos`,`ingresos`.`Fecha de raleo`, `ingresos`.`Fecha de ingreso`,`ingresos`.`Aves remanentes`,`ingresos`.`Edad de reproductora`,`ingresos`.`Aves cosechadas`,`galera`.`Nombre Granja`, `galera`.`Numero de Galera`,`galera`.`idGalera` ,`galera`.`Carrusel`,`proyeccionpeso`.`GDP1`,,`proyeccionpeso`.`GDP2`,`proyeccionpeso`.`GDP3`,`proyeccionpeso`.`GDP4`,`proyeccionpeso`.`GDP5`,,`proyeccionpeso`.`GDP6`,`proyeccionpeso`.`GDP7`,`proyeccionpeso`.`FCM1`,`proyeccionpeso`.`FCM2`,`proyeccionpeso`.`FCM3`,`proyeccionpeso`.`FCM4`,`proyeccionpeso`.`FCM5`,`proyeccionpeso`.`FCM6`,`proyeccionpeso`.`FCM7`,`proyeccionpeso`.`FCE1`,`proyeccionpeso`.`FCE2`,`proyeccionpeso`.`FCE3`,`proyeccionpeso`.`FCE4`,`proyeccionpeso`.`FCE5`,`proyeccionpeso`.`FCE6`,`proyeccionpeso`.`FCE7`,`proyeccionpeso`.`FactorCorrección`, x.fecharegistro, x.peso, x.desviacion FROM `cargill`.`ingresos` inner join `cargill`.`galera` on `galera`.`idGalera`=`ingresos`.`Galera_idGalera` inner join `cargill`.`proyeccionpeso` on `ingresos`.`Galera_idGalera`=`proyeccionpeso`.`Galera_idGalera` inner join (Select max (`pesaje`.`Fecha Registro`) as fecharegistro, max (`pesaje`.`Peso Promedio`) as peso, max (`pesaje`.`Desviación estándar_Peso`) as desviacion, `pesaje`.`Ingresos_idIngresos` as llaveingresos from `cargill`.`pesaje` group by `pesaje`.`Ingresos_idIngresos`)x on `Ingresos`.`idIngresos` = x.llaveingresos WHERE (ingresos.`Fecha de raleo`<? or ingresos.`Fecha de raleo`is null) AND INGRESOS.`Fecha de cosecha` is null AND INGRESOS.`Fecha de ingreso`<?;");
                galerasdisponibles.setDate(1,sqlraleoA);
                galerasdisponibles.setDate(2,sqlingreso);
                ResultSet resultadogalerasdisponibles = galerasdisponibles.executeQuery();
                while(resultadogalerasdisponibles.next()){
                    fechasgaleras[h][0]=resultadogalerasdisponibles.getDate("Fecha de ingreso");
                    fechasgaleras[h][1]=resultadogalerasdisponibles.getDate("fecharegistro");
                    galeras[h][0]=resultadogalerasdisponibles.getString("idIngresos");
                    galeras[h][1]=resultadogalerasdisponibles.getString("Aves remanentes");
                    galeras[h][2]=resultadogalerasdisponibles.getString("Edad de reproductora");
                    galeras[h][3]=resultadogalerasdisponibles.getString("peso");
                    galeras[h][4]=resultadogalerasdisponibles.getString("desviacion");
                    galeras[h][5]=resultadogalerasdisponibles.getString("Nombre Ganja");
                    galeras[h][6]=resultadogalerasdisponibles.getString("Numero de Galera");
                    galeras[h][7]=resultadogalerasdisponibles.getString("Carrusel");
                    galeras[h][8]=resultadogalerasdisponibles.getString("idGalera");
                    galeras[h][9]=resultadogalerasdisponibles.getString("Aves remanentes");
                    galeras[h][10]=resultadogalerasdisponibles.getString("Fecha de raleo");
                    idgalera[resultadogalerasdisponibles.getInt("idGalera")]=h;
                    variablespp[h][0]=resultadogalerasdisponibles.getFloat("GDP1");
                    variablespp[h][1]=resultadogalerasdisponibles.getFloat("FCM1");
                    variablespp[h][2]=resultadogalerasdisponibles.getFloat("FCE1");
                    variablespp[h][3]=resultadogalerasdisponibles.getFloat("GDP2");
                    variablespp[h][4]=resultadogalerasdisponibles.getFloat("FCM2");
                    variablespp[h][5]=resultadogalerasdisponibles.getFloat("FCE2");
                    variablespp[h][6]=resultadogalerasdisponibles.getFloat("GDP3");
                    variablespp[h][7]=resultadogalerasdisponibles.getFloat("FCM3");
                    variablespp[h][8]=resultadogalerasdisponibles.getFloat("FCE3");
                    variablespp[h][9]=resultadogalerasdisponibles.getFloat("GDP4");
                    variablespp[h][10]=resultadogalerasdisponibles.getFloat("FCM4");
                    variablespp[h][11]=resultadogalerasdisponibles.getFloat("FCE4");
                    variablespp[h][12]=resultadogalerasdisponibles.getFloat("GDP5");
                    variablespp[h][13]=resultadogalerasdisponibles.getFloat("FCM5");
                    variablespp[h][14]=resultadogalerasdisponibles.getFloat("FCE5");
                    variablespp[h][15]=resultadogalerasdisponibles.getFloat("GDP6");
                    variablespp[h][16]=resultadogalerasdisponibles.getFloat("FCM6");
                    variablespp[h][17]=resultadogalerasdisponibles.getFloat("FCE6");
                    variablespp[h][18]=resultadogalerasdisponibles.getFloat("GDP7");
                    variablespp[h][19]=resultadogalerasdisponibles.getFloat("FCM7");
                    variablespp[h][20]=resultadogalerasdisponibles.getFloat("FCE7");
                    variablespp[h][21]=resultadogalerasdisponibles.getFloat("FactorCorrección");
                    
                    h++;
                }
                resultadogalerasdisponibles.close();
                galerasdisponibles.close();
                String galerasredp="0", galerasredm="0", galerasredg="0", galerasredptotal="0", galerasredpnorte="0", galerasredmtotal="0", galerasredmnorte="0", galerasredgnorte="0", galerasredgtotal="0";
                float[][] pesoproyectado= new float [7][cantidadgalerasingresadas];
                int[][] redp=new int[7][cantidadgalerasingresadas];
                int[][] redg=new int[7][cantidadgalerasingresadas];
                int[][] redm=new int[7][cantidadgalerasingresadas];
                int[][] tamañored=new int[7][6];
                for(int r=0;r<7;r++){
                   tamañored[r][0]=0;
                   tamañored[r][1]=0;
                   tamañored[r][2]=0;
                   for(int q=0;q<cantidadgalerasingresadas;q++){
                       int diasdiferencia=java.lang.Math.round((sqlFechaInicial.getTime()-fechasgaleras[q][0].getTime())/(1000*60*60*24)); //dias que tiene que haber ingresado esa galera de ms a dias
                       int diasaproyectar=java.lang.Math.round((sqlFechaInicial.getTime()-fechasgaleras[q][1].getTime())/(1000*60*60*24)); 
                       int semanastotal= diasdiferencia/7;
                       int dsobrantes= diasdiferencia%7;
                       int d1=diasaproyectar-dsobrantes; //
                       int dpesocercano=d1%7;
                       int semanapesocercano=d1/7;
                       float pesoA=0;
                       int c=0;
                       switch (semanastotal){
                           case 7:
                               pesoA=dsobrantes*variablespp[q][18]*variablespp[q][19]*variablespp[q][20];
                               for(c=0;c<semanapesocercano;c++){
                                   pesoA=pesoA+(variablespp[q][18-(3*c)]*variablespp[q][19-(3*c)]*variablespp[q][20-(3*c)]*7);
                               }
                               pesoA=pesoA+(dpesocercano*variablespp[q][18-(3*c)]*variablespp[q][19-(3*c)]*variablespp[q][20-(3*c)]);
                               break;
                           case 6:
                               pesoA=dsobrantes*variablespp[q][18]*variablespp[q][19]*variablespp[q][20];
                               for(c=0;c<semanapesocercano;c++){
                                   pesoA=pesoA+(variablespp[q][15-(3*c)]*variablespp[q][16-(3*c)]*variablespp[q][17-(3*c)]*7);
                               }
                               pesoA=pesoA+(dpesocercano*variablespp[q][15-(3*c)]*variablespp[q][16-(3*c)]*variablespp[q][17-(3*c)]);
                               break;
                           case 5:
                               pesoA=dsobrantes*variablespp[q][15]*variablespp[q][16]*variablespp[q][17];
                               for(c=0;c<semanapesocercano;c++){
                                   pesoA=pesoA+(variablespp[q][12-(3*c)]*variablespp[q][13-(3*c)]*variablespp[q][14-(3*c)]*7);
                               }
                               pesoA=pesoA+(dpesocercano*variablespp[q][12-(3*c)]*variablespp[q][13-(3*c)]*variablespp[q][14-(3*c)]);
                               break;
                           case 4:
                               pesoA=dsobrantes*variablespp[q][12]*variablespp[q][13]*variablespp[q][14];
                               for(c=0;c<semanapesocercano;c++){
                                   pesoA=pesoA+(variablespp[q][9-(3*c)]*variablespp[q][10-(3*c)]*variablespp[q][11-(3*c)]*7);
                               }
                               pesoA=pesoA+(dpesocercano*variablespp[q][9-(3*c)]*variablespp[q][10-(3*c)]*variablespp[q][11-(3*c)]);
                               break;
                           default:
                               pesoA=dsobrantes*variablespp[q][9]*variablespp[q][10]*variablespp[q][11];
                               for(c=0;c<semanapesocercano;c++){
                                   pesoA=pesoA+(variablespp[q][6-(3*c)]*variablespp[q][7-(3*c)]*variablespp[q][8-(3*c)]*7);
                               }
                               pesoA=pesoA+(dpesocercano*variablespp[q][6-(3*c)]*variablespp[q][7-(3*c)]*variablespp[q][8-(3*c)]);
                               break;
                       }
                       pesoproyectado[r][q]=pesoA * variablespp[q][21] + Float.parseFloat (galeras[q][3]);
                        if(!galeras[h][7].equals("Periferica")){
                            if(pesoproyectado[r][q]>Float.parseFloat(rangospredeterminado[0][2])&& pesoproyectado[r][q]<Float.parseFloat(rangospredeterminado[0][1])){
                                     galerasredp=galerasredp+","+galeras[q][8];
                                     galerasredptotal=galerasredptotal+","+galeras[q][8];
                                     //redp[r][tamañored[r][0]]=q;
                                     tamañored[r][0]++;
                            }
                            if(pesoproyectado[r][q]>=Float.parseFloat(rangospredeterminado[1][2])&& pesoproyectado[r][q]<= Float.parseFloat(rangospredeterminado[1][1])){
                                     galerasredm=galerasredm+","+galeras[q][8];
                                     galerasredmtotal=galerasredmtotal+","+galeras[q][8];
                                     //redm[r][tamañored[r][1]]=q;
                                     tamañored[r][1]++;
                            }
                             if(pesoproyectado[r][q]>=Float.parseFloat(rangospredeterminado[2][2])&& pesoproyectado[r][q]<= Float.parseFloat(rangospredeterminado[2][1])){
                                     galerasredg=galerasredg+","+galeras[q][8];
                                     galerasredgtotal=galerasredgtotal+","+galeras[q][8];
                                     //redg[r][tamañored[r][2]]=q;
                                     tamañored[r][2]++;
                            }
                        }else{
                            if(pesoproyectado[r][q]>Float.parseFloat(rangospredeterminado[0][2])&& pesoproyectado[r][q]<Float.parseFloat(rangospredeterminado[0][1])){
                                     galerasredpnorte=galerasredpnorte+","+galeras[q][8];
                                     galerasredptotal=galerasredptotal+","+galeras[q][8];
                                     tamañored[r][3]++;
                            }
                            if(pesoproyectado[r][q]>=Float.parseFloat(rangospredeterminado[1][2])&& pesoproyectado[r][q]<= Float.parseFloat(rangospredeterminado[1][1])){
                                     galerasredmnorte=galerasredmnorte+","+galeras[q][8];
                                     galerasredmtotal=galerasredmtotal+","+galeras[q][8];
                                     tamañored[r][4]++;
                            }
                             if(pesoproyectado[r][q]>=Float.parseFloat(rangospredeterminado[2][2])&& pesoproyectado[r][q]<= Float.parseFloat(rangospredeterminado[2][1])){
                                     galerasredgnorte=galerasredgnorte+","+galeras[q][8];
                                     galerasredgtotal=galerasredgtotal+","+galeras[q][8];
                                     tamañored[r][5]++;
                            }
                        }
                   
                   }
                    if(tamañored[r][3]==0){
                        galerasredpnorte=galerasredp;
                        tamañored[r][3]=tamañored[r][0];
                    }
                    if(tamañored[r][4]==0){
                        galerasredmnorte=galerasredm;
                        tamañored[r][4]=tamañored[r][1];
                    }
                    if(tamañored[r][5]==0){
                        galerasredgnorte=galerasredg;
                        tamañored[r][5]=tamañored[r][2];
                    }
                }
                    
                //LA ELECCION DE GALERAS
                String [][][] planta =new String[7][16][6];
                for(int diax=0;diax<7;diax++){
                    SimpleDateFormat horacero=new SimpleDateFormat("HH:mm:ss");
                    String horainicioprocesamiento="19:00:00";
                    Calendar horarequeridaplanta = calendar.getInstance();
                    horarequeridaplanta.setTime(horacero.parse(horainicioprocesamiento));
                    Date horasinicio=horarequeridaplanta.getTime();
                    for(int secx=0;secx<tamañosecuenciautilizar[diax];secx++){
                        planta[diax][secx][0]=Integer.toString(secx+1); //numero secuencia
                        planta[diax][secx][1]=secuenciautilizar[secx][0][diax]; //rango
                        planta[diax][secx][2]=secuenciautilizar[secx][1][diax]; //horas de procesamiento
                        planta[diax][secx][5]=horasinicio.toString(); //hora. revisarlo
                        switch (planta[diax][secx][0]){
                            case "Grande": 
                                planta[diax][secx][3]=Float.toString(Float.parseFloat(planta[diax][secx][2])*necesidadActualizadaAves[diax][7]);//cantidad de aves
                                planta[diax][secx][4]=Float.toString(Float.parseFloat(planta[diax][secx][3])/2304);//cantidad de camiones
                                break;
                            case "Mediano":
                                planta[diax][secx][3]=Float.toString(Float.parseFloat(planta[diax][secx][2])*necesidadActualizadaAves[diax][6]);
                                planta[diax][secx][4]=Float.toString(Float.parseFloat(planta[diax][secx][3])/2592);
                                break;
                            case "Pequeño":
                                planta[diax][secx][3]=Float.toString(Float.parseFloat(planta[diax][secx][2])*necesidadActualizadaAves[diax][5]);
                                planta[diax][secx][4]=Float.toString(Float.parseFloat(planta[diax][secx][3])/2880);
                                break;
                            default:
                                planta[diax][secx][3]=Float.toString(Float.parseFloat(planta[diax][secx][2])*8400);
                                planta[diax][secx][4]=Float.toString(Float.parseFloat(planta[diax][secx][3])/2016);
                                break;
                        }
                        horarequeridaplanta.setTime(horasinicio);
                        horarequeridaplanta.add(Calendar.HOUR,(Integer.parseInt(planta[diax][secx][2])) );
                        horasinicio=horarequeridaplanta.getTime();
                    }
                    
                }
                String [][][] planborradorcosecha = new String[7][20][9];
                SimpleDateFormat hcero=new SimpleDateFormat("HH:mm:ss");
                String horainiciomatanza="12:00:00";
                Date[] cuadrilla=new Date[3];
                int[] galerascosechadas=new int[3];
                int tamanop=0;
                int tamanom=0;
                int tamanog=0;
                
                for (int dia=0;dia<7;dia++){
                    SimpleDateFormat formatohora=new SimpleDateFormat("HH:mm:ss");
                    String horainicioplanta="19:00:00";
                    Calendar horacubierta = calendar.getInstance();
                    horacubierta.setTime(formatohora.parse(horainicioplanta));
                    Date horasllegadaplanta=horacubierta.getTime();
                    int camionesusados=0;
                    int n=0;
                    cuadrilla[0]= hcero.parse(horainiciomatanza);
                    cuadrilla[1]= hcero.parse(horainiciomatanza);
                    cuadrilla[2]= hcero.parse(horainiciomatanza);
                    galerascosechadas[0]=0;
                    galerascosechadas[1]=0;
                    galerascosechadas[2]=0;
                    for(int cambios=0;cambios<tamañosecuenciautilizar[dia];cambios++){
                        int galeramejor=0;
                        float mep=100;
                        int indicadorcompiladas=0;
                        tamanop=0;
                        float cantidadcosechar=0;
                        float tiempo=0;
                        if((camionesusados+Integer.parseInt(planta[dia][cambios][4]))<=23){
                            if((cuadrilla[0].before(cuadrilla[1])||cuadrilla[0].equals(cuadrilla[1]))&&(cuadrilla[0].before(cuadrilla[2])||cuadrilla[0].equals(cuadrilla[2]))){
                                switch(planta[dia][cambios][1]){
                                    case "Pequeño":
                                        float[][] distanciap = new float[(tamañored[dia][0]+tamañored[dia][3])][3];
                                        if(galerascosechadas[0]==0){
                                            distanciap= new float[tamañored[dia][3]][3];
                                            PreparedStatement redpeq= con.prepareStatement("select * from `cargill`.`distanciagaleras` where `distanciagaleras`.`galerasaliente`=0 and `distanciagaleras`.`galeraentrante` in ("+galerasredpnorte+") order by `distanciagaleras`.`distancia`desc");
                                            ResultSet distanciaredpeq=redpeq.executeQuery();
                                            while(distanciaredpeq.next()){
                                                distanciap[tamanop][0]=distanciaredpeq.getFloat("galeraentrante");
                                                distanciap[tamanop][1]=distanciaredpeq.getFloat("distancia");
                                                distanciap[tamanop][2]=distanciaredpeq.getFloat("tiempo");
                                                tamanop++;
                                            }
                                            distanciaredpeq.close();
                                            redpeq.close();
                                            for(tamanop=0;tamanop<tamañored[dia][3];tamanop++){
                                                int p=idgalera[java.lang.Math.round(distanciap[tamanop][0])];
                                                float errorp= (Integer.parseInt(galeras[p][1])-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                float errorpraleado = ((Integer.parseInt(galeras[p][1])*raleo)-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                if(galeras[p][10].equals(null)&& Math.abs(errorpraleado)<mep){
                                                    galeramejor=tamanop;
                                                    indicadorcompiladas=0;
                                                    cantidadcosechar=Integer.parseInt(galeras[p][1]);
                                                    tiempo=distanciap[tamanop][2];
                                                    mep=Math.abs(errorp);
                                                }
                                                if(Math.abs(errorp)<mep){
                                                    galeramejor=tamanop;
                                                    indicadorcompiladas=0;
                                                    cantidadcosechar=Integer.parseInt(galeras[p][1])*raleo;
                                                    tiempo=distanciap[tamanop][2];
                                                    mep=Math.abs(errorp);
                                                }
                                                int uniongalerasp=0;
                                                float total=Integer.parseInt(galeras[p][1]);
                                                while(errorp < 1.0001 && tamanop<(tamañored[dia][3]-uniongalerasp)){
                                                    uniongalerasp++;
                                                    p=idgalera[java.lang.Math.round(distanciap[tamanop+uniongalerasp][0])];//revisar
                                                    total=total+Integer.parseInt(galeras[p][1]);//revisar
                                                    float errorcompilado=(total-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                    errorp=errorcompilado;
                                                    if(errorcompilado>1 && Math.abs(errorcompilado)>mep){
                                                        errorp=2;
                                                    } else if(errorcompilado>=1 && Math.abs(errorpraleado)<mep){    
                                                        galeramejor=tamanop;//revisar
                                                        indicadorcompiladas=uniongalerasp+1;
                                                        cantidadcosechar=total;
                                                        tiempo=distanciap[tamanop][2];
                                                        mep=Math.abs(errorcompilado);
                                                    }
                                                    
                                                }
                                                
                                            }
                                            if(indicadorcompiladas==0){
                                                planborradorcosecha[dia][n][0]=Integer.toString(cambios);
                                                planborradorcosecha[dia][n][1]=planta[dia][cambios][1];
                                                planborradorcosecha[dia][n][2]=Float.toString(cantidadcosechar/necesidadActualizadaAves[dia][5]);
                                                planborradorcosecha[dia][n][3]=Float.toString(cantidadcosechar);
                                                planborradorcosecha[dia][n][4]=Float.toString(cantidadcosechar/2880);
                                                planborradorcosecha[dia][n][5]=horasllegadaplanta.toString();
                                                planborradorcosecha[dia][n][6]=Integer.toString(java.lang.Math.round(distanciap[galeramejor][0]));
                                                planborradorcosecha[dia][n][7]="1";
                                                horacubierta.setTime(horasllegadaplanta);
                                                horacubierta.add(Calendar.MINUTE,-(java.lang.Math.round(Float.parseFloat(planborradorcosecha[dia][n][2])*60)));
                                                cuadrilla[0]=horacubierta.getTime();
                                                planborradorcosecha[dia][n][8]=cuadrilla[0].toString();
                                                n++;
                                            }else{
                                                for(int yu=0;yu<indicadorcompiladas;yu++){
                                                    planborradorcosecha[dia][yu+n][0]=Integer.toString(cambios);
                                                    planborradorcosecha[dia][yu+n][1]=planta[dia][cambios][1];
                                                    planborradorcosecha[dia][yu+n][2]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciap[galeramejor+yu][0])]][1])/necesidadActualizadaAves[dia][5]);
                                                    planborradorcosecha[dia][yu+n][3]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciap[galeramejor][0])]][1]));
                                                    planborradorcosecha[dia][yu+n][4]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciap[galeramejor][0])]][1])/2880);
                                                    planborradorcosecha[dia][yu+n][5]=horasllegadaplanta.toString();
                                                    planborradorcosecha[dia][yu+n][6]=Integer.toString(java.lang.Math.round(distanciap[galeramejor][0]));
                                                    planborradorcosecha[dia][yu+n][7]="1";
                                                    horacubierta.setTime(horasllegadaplanta);
                                                    horacubierta.add(Calendar.MINUTE,-(java.lang.Math.round((cantidadcosechar/necesidadActualizadaAves[dia][5])*60)));
                                                    cuadrilla[0]=horacubierta.getTime();
                                                    planborradorcosecha[dia][yu+n][8]=cuadrilla[0].toString();
                                                    
                                                }
                                                n=n+indicadorcompiladas;
                                            }
                                        }else{
                                            PreparedStatement redpeq= con.prepareStatement("select * from `cargill`.`distanciagaleras` where `distanciagaleras`.`galerasaliente`=? and `distanciagaleras`.`galeraentrante` in ("+galerasredp+") order by `distanciagaleras`.`distancia` asc");
                                            redpeq.setInt(1, galerascosechadas[0]);
                                            ResultSet distanciaredpeq=redpeq.executeQuery();
                                            while(distanciaredpeq.next()){
                                                int p=idgalera[distanciaredpeq.getInt("galeraentrante")];
                                                float errorp= (Integer.parseInt(galeras[p][1])-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                float errorpraleado = ((Integer.parseInt(galeras[p][1])*raleo)-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                if(!galeras[p][10].equals(null)&& Math.abs(errorp)<mep){
                                                    galeramejor=p;
                                                    mep=Math.abs(errorp);
                                                }
                                                if(galeras[p][10].equals(null)&& Math.abs(errorp)<mep){
                                                    galeramejor=p;
                                                    mep=Math.abs(errorp);
                                                }
                                                if(galeras[p][10].equals(null)&& Math.abs(errorpraleado)<mep){
                                                    galeramejor=p;
                                                    mep=Math.abs(errorp);
                                                }
                                            }
                                        
                                        }
                                        break;
                                    case "Mediano":
                                        float[][] distanciam = new float[tamañored[dia][1]+tamañored[dia][4]][3];
                                        if(galerascosechadas[0]==0){
                                            distanciam=new float[tamañored[dia][4]][3];
                                            PreparedStatement redmed= con.prepareStatement("select * from `cargill`.`distanciagaleras` where `distanciagaleras`.`galerasaliente`=0 and `distanciagaleras`.`galeraentrante` in ("+galerasredmnorte+") order by `distanciagaleras`.`distancia`desc");
                                            ResultSet distanciaredmed=redmed.executeQuery();
                                            while(distanciaredmed.next()){
                                                distanciam[tamanop][0]=distanciaredmed.getFloat("galeraentrante");
                                                distanciam[tamanop][1]=distanciaredmed.getFloat("distancia");
                                                distanciam[tamanop][2]=distanciaredmed.getFloat("tiempo");
                                                tamanop++;
                                            }
                                            distanciaredmed.close();
                                            redmed.close();
                                            for(tamanop=0;tamanop<tamañored[dia][4];tamanop++){
                                                int p=idgalera[java.lang.Math.round(distanciam[tamanop][0])];
                                                float errorp= (Integer.parseInt(galeras[p][1])-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                float errorpraleado = ((Integer.parseInt(galeras[p][1])*raleo)-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                if(galeras[p][10].equals(null)&& Math.abs(errorpraleado)<mep){
                                                    galeramejor=tamanop;
                                                    indicadorcompiladas=0;
                                                    cantidadcosechar=Integer.parseInt(galeras[p][1]);
                                                    tiempo=distanciam[tamanop][2];
                                                    mep=Math.abs(errorp);
                                                }
                                                if(Math.abs(errorp)<mep){
                                                    galeramejor=tamanop;
                                                    indicadorcompiladas=0;
                                                    cantidadcosechar=Integer.parseInt(galeras[p][1])*raleo;
                                                    tiempo=distanciam[tamanop][2];
                                                    mep=Math.abs(errorp);
                                                }
                                                int uniongalerasp=0;
                                                float total=Integer.parseInt(galeras[p][1]);
                                                while(errorp < 1.0001 && tamanop<(tamañored[dia][4]-uniongalerasp)){
                                                    uniongalerasp++;
                                                    p=idgalera[java.lang.Math.round(distanciam[tamanop+uniongalerasp][0])];//revisar
                                                    total=total+Integer.parseInt(galeras[p][1]);//revisar
                                                    float errorcompilado=(total-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                    errorp=errorcompilado;
                                                    if(errorcompilado>1 && Math.abs(errorcompilado)>mep){
                                                        errorp=2;
                                                    } else if(errorcompilado>=1 && Math.abs(errorpraleado)<mep){    
                                                        galeramejor=tamanop;//revisar
                                                        indicadorcompiladas=uniongalerasp;
                                                        cantidadcosechar=total;
                                                        tiempo=distanciam[tamanop][2];
                                                        mep=Math.abs(errorcompilado);
                                                    }
                                                    
                                                }
                                                
                                            }
                                            if(indicadorcompiladas==0){
                                                planborradorcosecha[dia][n][0]=Integer.toString(cambios);
                                                planborradorcosecha[dia][n][1]=planta[dia][cambios][1];
                                                planborradorcosecha[dia][n][2]=Float.toString(cantidadcosechar/necesidadActualizadaAves[dia][6]);
                                                planborradorcosecha[dia][n][3]=Float.toString(cantidadcosechar);
                                                planborradorcosecha[dia][n][4]=Float.toString(cantidadcosechar/2592);
                                                planborradorcosecha[dia][n][5]=horasllegadaplanta.toString();
                                                planborradorcosecha[dia][n][6]=Integer.toString(java.lang.Math.round(distanciam[galeramejor][0]));
                                                planborradorcosecha[dia][n][7]="1";
                                                horacubierta.setTime(horasllegadaplanta);
                                                horacubierta.add(Calendar.MINUTE,-(java.lang.Math.round(Float.parseFloat(planborradorcosecha[dia][n][2])*60)));
                                                cuadrilla[0]=horacubierta.getTime();
                                                planborradorcosecha[dia][n][8]=cuadrilla[0].toString();
                                            }else{
                                            for(int yu=0;yu<indicadorcompiladas;yu++){
                                                    planborradorcosecha[dia][yu+n][0]=Integer.toString(cambios);
                                                    planborradorcosecha[dia][yu+n][1]=planta[dia][cambios][1];
                                                    planborradorcosecha[dia][yu+n][2]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciam[galeramejor+yu][0])]][1])/necesidadActualizadaAves[dia][5]);
                                                    planborradorcosecha[dia][yu+n][3]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciam[galeramejor][0])]][1]));
                                                    planborradorcosecha[dia][yu+n][4]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciam[galeramejor][0])]][1])/2880);
                                                    planborradorcosecha[dia][yu+n][5]=horasllegadaplanta.toString();
                                                    planborradorcosecha[dia][yu+n][6]=Integer.toString(java.lang.Math.round(distanciam[galeramejor][0]));
                                                    planborradorcosecha[dia][yu+n][7]="1";
                                                    horacubierta.setTime(horasllegadaplanta);
                                                    horacubierta.add(Calendar.MINUTE,-(java.lang.Math.round((cantidadcosechar/necesidadActualizadaAves[dia][5])*60)));
                                                    cuadrilla[0]=horacubierta.getTime();
                                                    planborradorcosecha[dia][yu+n][8]=cuadrilla[0].toString();
                                                    
                                                }
                                                n=n+indicadorcompiladas;
                                            
                                            }
                                        }else{
                                            PreparedStatement redmed= con.prepareStatement("select * from `cargill`.`distanciagaleras` where `distanciagaleras`.`galerasaliente`=? and `distanciagaleras`.`galeraentrante` in ("+galerasredm+") order by `distanciagaleras`.`distancia` asc");
                                            redmed.setInt(1, galerascosechadas[0]);
                                            ResultSet distanciaredpeq=redmed.executeQuery();
                                            while(distanciaredpeq.next()){
                                                int p=idgalera[distanciaredpeq.getInt("galeraentrante")];
                                                float errorp= (Integer.parseInt(galeras[p][1])-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                float errorpraleado = ((Integer.parseInt(galeras[p][1])*raleo)-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                if(!galeras[p][10].equals(null)&& Math.abs(errorp)<mep){
                                                    galeramejor=p;
                                                    mep=Math.abs(errorp);
                                                }
                                                if(galeras[p][10].equals(null)&& Math.abs(errorp)<mep){
                                                    galeramejor=p;
                                                    mep=Math.abs(errorp);
                                                }
                                                if(galeras[p][10].equals(null)&& Math.abs(errorpraleado)<mep){
                                                    galeramejor=p;
                                                    mep=Math.abs(errorp);
                                                }
                                            }
                                        
                                        }
                                        break;
                                    case "Grande":
                                        float[][] distanciag = new float[tamañored[dia][2]+tamañored[dia][5]][3];
                                        if(galerascosechadas[0]==0){
                                            distanciag=new float[tamañored[dia][5]][3];
                                            PreparedStatement redgra= con.prepareStatement("select * from `cargill`.`distanciagaleras` where `distanciagaleras`.`galerasaliente`=0 and `distanciagaleras`.`galeraentrante` in ("+galerasredgnorte+") order by `distanciagaleras`.`distancia`desc");
                                            ResultSet distanciaredgra=redgra.executeQuery();
                                            while(distanciaredgra.next()){
                                                distanciag[tamanop][0]=distanciaredgra.getFloat("galeraentrante");
                                                distanciag[tamanop][1]=distanciaredgra.getFloat("distancia");
                                                distanciag[tamanop][2]=distanciaredgra.getFloat("tiempo");
                                                tamanop++;
                                            }
                                            distanciaredgra.close();
                                            redgra.close();
                                            for(tamanop=0;tamanop<tamañored[dia][4];tamanop++){
                                                int p=idgalera[java.lang.Math.round(distanciag[tamanop][0])];
                                                float errorp= (Integer.parseInt(galeras[p][1])-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                float errorpraleado = ((Integer.parseInt(galeras[p][1])*raleo)-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                if(galeras[p][10].equals(null)&& Math.abs(errorpraleado)<mep){
                                                    galeramejor=tamanop;
                                                    indicadorcompiladas=0;
                                                    cantidadcosechar=Integer.parseInt(galeras[p][1]);
                                                    tiempo=distanciag[tamanop][2];
                                                    mep=Math.abs(errorp);
                                                }
                                                if(Math.abs(errorp)<mep){
                                                    galeramejor=tamanop;
                                                    indicadorcompiladas=0;
                                                    cantidadcosechar=Integer.parseInt(galeras[p][1])*raleo;
                                                    tiempo=distanciag[tamanop][2];
                                                    mep=Math.abs(errorp);
                                                }
                                                int uniongalerasp=0;
                                                float total=Integer.parseInt(galeras[p][1]);
                                                while(errorp < 1.0001 && tamanop<(tamañored[dia][4]-uniongalerasp)){
                                                    uniongalerasp++;
                                                    p=idgalera[java.lang.Math.round(distanciag[tamanop+uniongalerasp][0])];//revisar
                                                    total=total+Integer.parseInt(galeras[p][1]);//revisar
                                                    float errorcompilado=(total-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                    errorp=errorcompilado;
                                                    if(errorcompilado>1 && Math.abs(errorcompilado)>mep){
                                                        errorp=2;
                                                    } else if(errorcompilado>=1 && Math.abs(errorpraleado)<mep){    
                                                        galeramejor=tamanop;//revisar
                                                        indicadorcompiladas=uniongalerasp+1;
                                                        cantidadcosechar=total;
                                                        tiempo=distanciag[tamanop][2];
                                                        mep=Math.abs(errorcompilado);
                                                    }
                                                    
                                                }
                                                
                                            }
                                            if(indicadorcompiladas==0){
                                                planborradorcosecha[dia][n][0]=Integer.toString(cambios);
                                                planborradorcosecha[dia][n][1]=planta[dia][cambios][1];
                                                planborradorcosecha[dia][n][2]=Float.toString(cantidadcosechar/necesidadActualizadaAves[dia][6]);
                                                planborradorcosecha[dia][n][3]=Float.toString(cantidadcosechar);
                                                planborradorcosecha[dia][n][4]=Float.toString(cantidadcosechar/2592);
                                                planborradorcosecha[dia][n][5]=horasllegadaplanta.toString();
                                                planborradorcosecha[dia][n][6]=Integer.toString(java.lang.Math.round(distanciag[galeramejor][0]));
                                                planborradorcosecha[dia][n][7]="1";
                                                horacubierta.setTime(horasllegadaplanta);
                                                horacubierta.add(Calendar.MINUTE,-(java.lang.Math.round(Float.parseFloat(planborradorcosecha[dia][n][2])*60)));
                                                cuadrilla[0]=horacubierta.getTime();
                                                planborradorcosecha[dia][n][8]=cuadrilla[0].toString();
                                            }else{
                                            for(int yu=0;yu<indicadorcompiladas;yu++){
                                                    planborradorcosecha[dia][yu+n][0]=Integer.toString(cambios);
                                                    planborradorcosecha[dia][yu+n][1]=planta[dia][cambios][1];
                                                    planborradorcosecha[dia][yu+n][2]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciag[galeramejor+yu][0])]][1])/necesidadActualizadaAves[dia][5]);
                                                    planborradorcosecha[dia][yu+n][3]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciag[galeramejor][0])]][1]));
                                                    planborradorcosecha[dia][yu+n][4]=Float.toString(Integer.parseInt(galeras[idgalera[java.lang.Math.round(distanciag[galeramejor][0])]][1])/2880);
                                                    planborradorcosecha[dia][yu+n][5]=horasllegadaplanta.toString();
                                                    planborradorcosecha[dia][yu+n][6]=Integer.toString(java.lang.Math.round(distanciag[galeramejor][0]));
                                                    planborradorcosecha[dia][yu+n][7]="1";
                                                    horacubierta.setTime(horasllegadaplanta);
                                                    horacubierta.add(Calendar.MINUTE,-(java.lang.Math.round((cantidadcosechar/necesidadActualizadaAves[dia][5])*60)));
                                                    cuadrilla[0]=horacubierta.getTime();
                                                    planborradorcosecha[dia][yu+n][8]=cuadrilla[0].toString();
                                                    
                                                }
                                                n=n+indicadorcompiladas;
                                            
                                            }
                                        }else{
                                            PreparedStatement redgran= con.prepareStatement("select * from `cargill`.`distanciagaleras` where `distanciagaleras`.`galerasaliente`=? and `distanciagaleras`.`galeraentrante` in ("+galerasredg+") order by `distanciagaleras`.`distancia` asc");
                                            redgran.setInt(1, galerascosechadas[0]);
                                            ResultSet distanciaredpeq=redgran.executeQuery();
                                            while(distanciaredpeq.next()){
                                                int p=idgalera[distanciaredpeq.getInt("galeraentrante")];
                                                float errorp= (Integer.parseInt(galeras[p][1])-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                float errorpraleado = ((Integer.parseInt(galeras[p][1])*raleo)-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                if(!galeras[p][10].equals(null)&& Math.abs(errorp)<mep){
                                                    galeramejor=p;
                                                    mep=Math.abs(errorp);
                                                }
                                                if(galeras[p][10].equals(null)&& Math.abs(errorp)<mep){
                                                    galeramejor=p;
                                                    mep=Math.abs(errorp);
                                                }
                                                float total=Integer.parseInt(galeras[p][1]);
                                                for(int ws=1;ws<4;ws++){
                                                    p=idgalera[distanciaredpeq.getInt("galeraentrante")+ws];//revisar
                                                    total=total+Integer.parseInt(galeras[p][1]);//revisar
                                                    float errorcompilado=(total-Integer.parseInt(planta[dia][cambios][3]))/Integer.parseInt(planta[dia][cambios][3]);
                                                    if(errorcompilado>1 && Math.abs(errorpraleado)>mep){
                                                        ws=4;
                                                    } else if(errorcompilado>1 && Math.abs(errorpraleado)<mep){    
                                                        galeramejor=p;
                                                        mep=Math.abs(errorp);
                                                    }
                                                }
                                            }
                                        
                                        }
                                        break;
                                }
                                //
                            } else if((cuadrilla[1].before(cuadrilla[0])||cuadrilla[1].equals(cuadrilla[0]))&&(cuadrilla[1].before(cuadrilla[2])||cuadrilla[1].equals(cuadrilla[2]))){
                            
                            } else {
                            
                            }
                        }else{
                        
                        }
                    }
                
                }
                
            }   
        } catch (Exception e) {
            jDialog1.setVisible(false);
            JOptionPane.showMessageDialog(null, e.getMessage(),"Error", JOptionPane.ERROR_MESSAGE);
        }
        
        jDialog1.setVisible(false);
        mostrarGenerarReporte(idUsuarioAutenticado);
    }//GEN-LAST:event_GenerarReporteActionPerformed

    private void ConsultarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarReporteActionPerformed
        mostrarConsultarReporte(idUsuarioAutenticado);
    }//GEN-LAST:event_ConsultarReporteActionPerformed
    public void mostrarGenerarReporte(int usuario) {
        //PlanCosechaCortoPlazo plan=new PlanCosechaCortoPlazo();
       // plan.setVisible(true);
        //plan.setLocationRelativeTo(null);
    }
    public void mostrarConsultarReporte(int usuario) {
        ConsultarCosechaCorto plan=new ConsultarCosechaCorto();
        plan.setVisible(true);
        plan.setLocationRelativeTo(null);
    }
    public void mostrarModificarReporte(int usuario) {
        ModificarPlanCosechaCortoPlazo plan=new ModificarPlanCosechaCortoPlazo();
        plan.setVisible(true);
        plan.setLocationRelativeTo(null);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CosechaCortoPlazo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CosechaCortoPlazo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CosechaCortoPlazo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CosechaCortoPlazo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                int a=0;
                new CosechaCortoPlazo(a).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConsultarReporte;
    private javax.swing.JButton GenerarReporte;
    private javax.swing.JButton ModificarReporte;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
